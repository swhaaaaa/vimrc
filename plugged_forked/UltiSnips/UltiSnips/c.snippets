
###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet Def "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet def
#define 
endsnippet

snippet ifdef
#ifdef ${1:FOO}
	${0:/* code */}
#endif
endsnippet

snippet #if "#if #endif" !b
#if ${1:0}
	${0:/* code */}
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename`}.h"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1}.h>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char const *argv[])
{
	${0:/* code */}
	return 0;
}
endsnippet

# Function
snippet fun
${1:void} ${2:function_name}(${3})
{
	${0:/* code */}
}
endsnippet

# Function Declaration
snippet fund
${1:void} ${2:function_name}(${3});${4}
endsnippet


snippet for "for int loop (fori)"
for (${4}${2:i} = 0; $2 < ${1:count}; ${3:++}$2 ){
	${0:/* code */}
}
endsnippet

# Custom For Loop
snippet forr
for (${5}${2:i} = ${3:0}; $2${1: < 10}; ${4:++}$2 ){
	${0:/* code */}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

# Typdef enum
snippet tde
typedef enum {
	${1:/* data */}
} ${2:foo};
endsnippet

snippet oncerand "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */

endsnippet


snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = name
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */

endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};${3}
endsnippet

snippet do "do...while loop (do)"
do {
	${0:/* code */}
} while(${1:/* condition */});
endsnippet

# While Loop
snippet wh
while (${1:/* condition */}) {
	${0:/* code */}
}
endsnippet


#snippet fprintf "fprintf ..."
#fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
#endsnippet

snippet if "if .. (if)"
if ( ${1:/* condition */} )
{
	${2:/* code */}
}
${0}
endsnippet

snippet elif
else if ( ${1:/* condition */} )
{
	${2:/* code */}
}
${0}
endsnippet

snippet el
else
{
	${1}
}
${0}
endsnippet

# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet


#snippet printf "printf .. (printf)"
snippet pr "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet


# Struct
snippet st
struct ${1:`Filename('$1_t', 'name')`} {
	${2:/* data */}
}${3: /* optional variable list */};${4}
endsnippet

# Typedef struct
snippet tds
typedef struct ${2:_$1 }{
	${3:/* data */}
} ${1:`Filename('$1_t', 'name')`};
endsnippet

snippet [[
[${1}]${2}
endsnippet

snippet {{
{${1}}${2}
endsnippet

snippet ""
"${1}"${2}
endsnippet

snippet ((
(${1})${2}
endsnippet

snippet un
unsigned
endsnippet

snippet showtime
{
struct timeval tv;

gettimeofday(&tv,NULL);
fprintf(stderr, "%s[%d] %lu.%06lu\n", __FUNCTION__, __LINE__, tv.tv_sec, tv.tv_usec);
}
endsnippet

snippet dumpbuf
{
int i;
char *ptr = (char *)${1:NULL};
int buf_len = ${2:0};
char alpha_buf[32];

memset(alpha_buf, 0x00, sizeof(alpha_buf));

fprintf(stderr, "%s[%d] ${3:buf}: [%d]\n", __FUNCTION__, __LINE__${4:,} buf_len);
for (i = 0; i < buf_len; ++i )
{
    if ( !(i % 16) )
    {
        fprintf(stderr, "%08x: ", i);
    }

    fprintf(stderr, "%02x ", ptr[i]);
    alpha_buf[i % 16] = (ptr[i] >= 0x20) && (ptr[i] <= 0x7e) ? ptr[i] : '.';

    if ( (i % 16) == 15 ) {
        fprintf(stderr, "\t%s\n", alpha_buf);
        memset(alpha_buf, 0x00, sizeof(alpha_buf));
    }
    else if ( (i % 16) == 7 )
    {
        fprintf(stderr, " ");
    }
}
fprintf(stderr, "\t%s\n", alpha_buf);
memset(alpha_buf, 0x00, sizeof(alpha_buf));
}
endsnippet

snippet fpr
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# vim:ft=snippets:
